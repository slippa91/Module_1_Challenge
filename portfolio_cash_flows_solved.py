# -*- coding: utf-8 -*-
"""
Asynch M1 - Challenge Lesson - International Microfinance Lending - Phase 2 - Solved

In this script, the focus will be on utilizing functions to determine the cash flows generated by each portfolio as well as the funds generated per month.
"""

# Phase 2 - Calculating Cash Flows

# In Phase 2 of the International MicroFinance Lending Challenge Lesson, you
# are looking to evaluate the cash flows generated by each portfolio.

# The portfolio being evaluated is the same as from Phase 1, only it includes
# the 'loan_local_value' key:value pair in each dictionary.

microfinance_portfolio_data = [
    {'loan_value_usd': 1000, 'term_in_months': 9, 'annual_interest_rate': 0.07,
     'repayment_interval': 'monthly', 'local_currency': 'pkr',
     'fx_rate_at_loan_issue': 162.76, 'loan_local_value': 162760},
    {'loan_value_usd': 2500, 'term_in_months': 6, 'annual_interest_rate': 0.10,
     'repayment_interval': 'monthly', 'local_currency': 'pkr',
     'fx_rate_at_loan_issue': 162.76, 'loan_local_value': 406900},
    {'loan_value_usd': 400, 'term_in_months': 4, 'annual_interest_rate': 0.15,
     'repayment_interval': 'monthly', 'local_currency': 'pkr',
     'fx_rate_at_loan_issue': 162.76, 'loan_local_value': 65104},
    {'loan_value_usd': 750, 'term_in_months': 12, 'annual_interest_rate': 0.1825,
     'repayment_interval': 'monthly', 'local_currency': 'pkr',
     'fx_rate_at_loan_issue': 162.76, 'loan_local_value': 122070},
    {'loan_value_usd': 500, 'term_in_months': 12, 'annual_interest_rate': 0.195,
     'repayment_interval': 'bullet', 'local_currency': 'pkr',
     'fx_rate_at_loan_issue': 162.76, 'loan_local_value': 81380},
    {'loan_value_usd': 250, 'term_in_months': 12, 'annual_interest_rate': 0.15,
     'repayment_interval': 'monthly', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 25820},
    {'loan_value_usd': 500, 'term_in_months': 9, 'annual_interest_rate': 0.175,
     'repayment_interval': 'monthly', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 51640},
    {'loan_value_usd': 1000, 'term_in_months': 6, 'annual_interest_rate': 0.125,
     'repayment_interval': 'quarterly', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 103280},
    {'loan_value_usd': 2500, 'term_in_months': 3, 'annual_interest_rate': 0.20,
     'repayment_interval': 'bullet', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 258200},
    {'loan_value_usd': 300, 'term_in_months': 6, 'annual_interest_rate': 0.15,
     'repayment_interval': 'bullet', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 30984},
    {'loan_value_usd': 750, 'term_in_months': 12, 'annual_interest_rate': 0.15,
     'repayment_interval': 'quarterly', 'local_currency': 'kes',
     'fx_rate_at_loan_issue': 103.28, 'loan_local_value': 77460},
    {'loan_value_usd': 1250, 'term_in_months': 12, 'annual_interest_rate': 0.20,
     'repayment_interval': 'monthly', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 86475},
    {'loan_value_usd': 500, 'term_in_months': 6, 'annual_interest_rate': 0.15,
     'repayment_interval': 'quarterly', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 34590},
    {'loan_value_usd': 200, 'term_in_months': 3, 'annual_interest_rate': 0.10,
     'repayment_interval': 'bullet', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 13836},
    {'loan_value_usd': 800, 'term_in_months': 12, 'annual_interest_rate': 0.125,
     'repayment_interval': 'monthly', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 55344},
    {'loan_value_usd': 1000, 'term_in_months': 6, 'annual_interest_rate': 0.10,
     'repayment_interval': 'monthly', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 69180},
    {'loan_value_usd': 800, 'term_in_months': 12, 'annual_interest_rate': 0.15,
     'repayment_interval': 'quarterly', 'local_currency': 'inr',
     'fx_rate_at_loan_issue': 69.18, 'loan_local_value': 55344}
]


# As stated, the goal of Phase 2 is to determine the periodic cash flows
# generated by each of the portfolios. You can assume that each payment will
# include both the principle and interest and the the payments will be make in equal installments over the duration of the loan.

# The formula for determing the period payment of loan is as follows:

# > **Payment = loan value * interest_rate_per_period /
#  1 - (1 + rate per period)**-number_payment_periods**

# Examining the loan data, note that there are 3 different repayment intervals:

#  **monthly** - a payment will be made each MONTH for the duration of the loan
#  **quarterly** - a payment will be made each QUARTER (or once every 3 months)
#  for the duration of the loan
#  **bullet** - a SINGLE PAYMENT of principle and interest will be made at the
#  end of the loan's term.


# The annual_interest_rate value will need to be adjusted to account for each loan's repayment interval. For example, an loan with an annual_interest_rate of 0.07 and a repayment_interval of monthly will have a period_interest_rate of (0.07 / 12)


# Because these loans were made to the individuals in local currency, these
# repayment calculations will need to be made using the **loan_local_value**.


print('----- 1 -----')


# Part 1 -  Calculating Period Payments per Loan

# Instructions:

# The goal is to create the function for calculating the amount the borrower
# is expected to repay at each stated repayment interval. The variable used to
# hold this amount should be called period_payment.

# For loans with a 'monthly'  repayment_interval, the loan will be repaid
# in equal interval_repayment_amounts will be make every month.

# For loans with a 'quarterly' repayment_interval, the loan will be repaid
# in equal interval_repayment_amounts make every 3 months.

# For the 'bullet' repayment_interval, there will be one payment at the end
# of the term that includes principle and interest.

# The annual_interest_rate value will need to be adjusted to account for each loan's repayment_interval.

# Once the period_payment is calculated, append key:value pair to the loans
# dictionary. The key should be called 'interval_repayment_amount'.

# NOTE: Before beginning to code, read through the the entire problem and
# attempt pseudocode the program.


# @TODO: Write the for loop that iterates through the microfinance portfolio

for loan in microfinance_portfolio_data:

    # @TODO Write the 3 conditional statements that differentiate the
    # microfinance portfolio by repayment_intervals.
        # HINT - Don't forget that each loan is a dictionary. Use bracket
        # notation to access keys.
        # HINT - Use "double equal" to compare values.

    if loan['repayment_interval'] == 'monthly':

        # @TODO: Inside the 'monthly' conditional statement, create an equation that calculates the interest_rate_per_period.
                # The duration of our loans is less than 1 year so the
                # annual_interest_rate will only need to be divided by the
                # repayment period to determine the rate per period.

                # For 'monthly' the divisor will be 12.

                # For 'quarterly', the divisor will be 4.

                # 'Bullet' payments are more challenging. The rate will need to
                # be divided by 12 but that that calculation will need to be
                # multiplied by the length in months of the loan.

        interest_rate_per_period = loan['annual_interest_rate'] / 12

        # @TODO: Create a variable for the number_payment_periods. Set it equal
        # to the relationship between the loan's term_in_months and the
        # repayment_interval.
        # For instance, if the term_in_months of the loan is 6 and the
        # repayment_interval is 'quarterly'(or every 3 months), the
        # number_payment_periods is 2.
        # For a 'monthly' loan, the number of payment periods is the
        # length in months of the loan.
        # For a 'bullet' loan, there is only one payment.

        number_payment_periods = loan['term_in_months']

        # @TODO: Create an equation for the interval_repayment_amount using the
        # equation detailed below. Use loan_local_value for the value of the
        # loan.
        # Payment = loan value * interest_rate_per_period /
        #   1 - (1 + rate per period)**-number_payment_periods

        interval_repayment_amount = (loan['loan_local_value'] * interest_rate_per_period) / (1 - (1 + interest_rate_per_period)**-number_payment_periods)

        # @TODO: Update date the loan dictionary with a key called
        # interval_repayment_amount and a value equal to the
        # interval_repayment_amount calculation from step 5.

        loan['interval_repayment_amount'] = round(interval_repayment_amount, 0)



    # @TODO: Calculate the interval_repayment_amount for the loans with a
    # "quarterly" cycle using the above instructions.
    if loan['repayment_interval'] == 'quarterly':
        interest_rate_per_period = loan['annual_interest_rate'] / 4

        number_payment_periods = loan['term_in_months'] / 3

        interval_repayment_amount = (loan['loan_local_value'] * interest_rate_per_period) / (1 - (1 + interest_rate_per_period)**-number_payment_periods)

        loan['interval_repayment_amount'] = round(interval_repayment_amount, 0)



    # @TODO: Calculate the interval_repayment_amount for the loans with a
    # "bullet", or singly payment, cycle using the above instructions.
    if loan['repayment_interval'] == 'bullet':
        interest_rate_per_period = (loan['annual_interest_rate'] / 12) * loan['term_in_months']

        number_payment_periods = 1

        interval_repayment_amount = (loan['loan_local_value'] * interest_rate_per_period) / (1 - (1 + interest_rate_per_period)**-number_payment_periods)

        loan['interval_repayment_amount'] = round(interval_repayment_amount, 0)



# Confirm that the key:value pairs have been added to the dictionaries
#  properly by printing out one loan from each foreign currency.

sample_loan_pkr = microfinance_portfolio_data[0]
sample_loan_kes = microfinance_portfolio_data[5]
sample_loan_inr = microfinance_portfolio_data[11]

print(f'Confirming that the PKR loans have a interval_repayment_amount: {sample_loan_pkr}')
print(f'Confirming that the KES loans have a interval_repayment_amount: {sample_loan_kes}')
print(f'Confirming that the INR loans have a interval_repayment_amount: {sample_loan_inr}')

print("mpd", microfinance_portfolio_data )

print('----- 2 -----')



# Part 2 -  USD Receipts by Month

# The goal of this next section is to determine the total US dollar amount
# expected in payments for each month of the loan cycle.

# Because this is a process that will be done repeatedly for different loan
# portfolios and different months, the activity requires building a function.

# Given that the goal is to calculate the payments generated per portfolio per
# month, the function should take in two arguments:
#   1. The loan portfolio
#   2. The number of the month for which flows are wanted (numbered 1 -> 12).

# The function should return return the US dollar value of the loan repayments.

# In this activity, current fx rates will be provided for the currencies so the
# projected US dollar value is as accurate as possible.


# Instructions

# It achieve the aim of calculated the expected cash flow per month, the
# function should focus on sorting through the repayment_interval and
# term_in_months values to make calculations.

# Because the function should work for all loans it will require a second level
# sort on local_currency so that currency fx values can be applied to the
# calculations.

# NOTE: Think through the required steps and attempt to pseudocode the solution
# before writing the code.


# Use the following FX rates when processing calculations. These rates differ
# from the ones provied at the time the loan was issued.
current_fx_rate_usdpkr = 157.15
current_fx_rate_usdkes = 102.48
current_fx_rate_usdinr = 74.06


# The following function will convert a foreign currency amount to USD based on
# the amount and currency passed in. This function uses the globally-scoped current fx rates detailed above.
def convert_local_cash_flow_to_usd(local_cash_flow, local_currency):
    """
    Converts the foreign currency cash flow amount into a US dollar amount
    using the fx rate provided.

    Args:
        local_cash_flow (float): The amount of local currency to be converted
        local_currency (string): The identifier of the local currency to be converted

    Return:
        The USD value of the converted cash flow.
    """

    flow_converted_to_usd = 0.0

    if local_currency == 'pkr':
        flow_converted_to_usd = local_cash_flow / current_fx_rate_usdpkr

    if local_currency == 'kes':
        flow_converted_to_usd = local_cash_flow / current_fx_rate_usdkes


    if local_currency == 'inr':
        flow_converted_to_usd = local_cash_flow / current_fx_rate_usdinr


    return round(flow_converted_to_usd, 2)


# @TODO: Create a function called 'calculate_monthly_cash_flows' The function
# will take in 2 arguments, the loan portfolio and the month for which you
# would like cash flow information (month_of_repayment).
# HINT:  Also create the function call and pass in the arguments to confirm
# that the required data is available inside the function.

def calculate_monthly_cash_flows(loan_portfolio, month_of_repayment):
    """
    Calculates the US dollar cash flows generated by a specified loan portfolio
    for the specified month.

    Args:
        loan_portfolio (list) - the loan portfolio to be analyzed
        month_of_repayment (int) - the month for which the repayment information is being rendered

    Return:
        The USD amount expected for repayment on the specified month.
    """

    # @TODO: Create a function-scoped variable to hold the usd total of the monthly flow.
    monthly_cash_flow_total_usd = 0.0


    # @TODO: Write the for loop that iterates through each loan in the  imported portfolio.
    # HINT - remember to reference the portfolio by the parameter used in
    # the function definition.

    for loan in loan_portfolio:

        # Metric variable
        monthly_cash_flow_amount_in_usd = 0.0

        print("loan", loan)

        # @TODO
        # Create descriptive variables for each of the key:value positions in
        # the loan.  This will make the elements easier to recognize and
        # reference in the function.

        loan_value_usd = loan['loan_value_usd']
        term_in_months = loan['term_in_months']
        annual_interest_rate = loan['annual_interest_rate']
        repayment_interval = loan['repayment_interval']
        local_currency = loan['local_currency']
        fx_rate_at_loan_issue = loan['fx_rate_at_loan_issue']
        loan_local_value =loan['loan_local_value']
        interval_repayment_amount = loan['interval_repayment_amount']


        # @TODO: Create the 3 conditional statements that differentiate the
        #  loans by repayment_interval. Start with "monthly"
        if repayment_interval == 'monthly':

            # @TODO: Inside each conditional statement, nest a second
            # conditional that verifies if the portfolio will make a payment
            #  for the month in question. (ie is the the month of repayment less than or equal to the term in months of the loan).
            if month_of_repayment <= term_in_months:

                #If there is a payment made on the month in question, convert the local period repayment to USD.

                # @TODO: Call the covert_local_cash_flow_to_usd function
                # passing it the interval_repayment_amount and the local
                # currency identifier. Set this function call equal to a variable called monthly_cash_flow_amount_in_usd.
                monthly_cash_flow_amount_in_usd = convert_local_cash_flow_to_usd(interval_repayment_amount, local_currency)

            else:
                print("No flows for this month from this loan")


        # @TODO: Based on the instructions above, write the code block for the "quarterly" repayment interval. You will have to add a second
        # conditional to the nested if statement that confirms if the month in question falls on a quarter (ie month_of_repayment % 3 == 0)
        elif repayment_interval == 'quarterly':

            if (month_of_repayment % 3 == 0) and (month_of_repayment <= term_in_months):

                monthly_cash_flow_amount_in_usd = convert_local_cash_flow_to_usd(interval_repayment_amount, local_currency)

            else:
                print("No flows for this month from this loan")


        # @TODO: Based on the instructions above, write the code block for the
        # "bullet" repayment interval. For this nested conditional, the
        # repayment month will have to exactly equal the term in months for
        #  their to be a calculation.
        elif repayment_interval == 'bullet':

            if month_of_repayment == term_in_months:

                monthly_cash_flow_amount_in_usd = convert_local_cash_flow_to_usd(interval_repayment_amount, local_currency)

            else:
                print("No flows for this month from this loan")

        # @TODO: Outside of the repayment_interval conditionals, write the
        # equation that adds each monthly_cash_flow_amount_in_usd amount to
        # the monthly_cash_flow_total_usd.
        monthly_cash_flow_total_usd += monthly_cash_flow_amount_in_usd

    # @TODO: Write the return statement for the monthly_cash_flow_total_usd so
    #  it can be used outside the function.
    return monthly_cash_flow_total_usd


# @TODO: Create the function call for the calculate_monthly_cash_flow function.
# Pass the micro-finance loan and the value of the month (1-12).
    # HINT - Set the function call equal to a variable so it can be utilized.
    # A suggestion for a variable name is total_amount_of_usd_for_month.

total_amount_of_usd_for_month = calculate_monthly_cash_flows(microfinance_portfolio_data, 6)

# @TODO: Write the print statement for US dollar value cash flows for the month.
# Be sure to round the value to 2 decimal places.

print(f"Total USD flows for the month: ${total_amount_of_usd_for_month: .2f}.")
